<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.linlinjava.litemall.db.dao.StoreInfoMapper">
  <resultMap id="BaseResultMap" type="org.linlinjava.litemall.db.domain.StoreInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="quality" jdbcType="VARCHAR" property="quality" />
    <result column="value" jdbcType="INTEGER" property="value" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="add_time" jdbcType="TIMESTAMP" property="addTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="deleted" jdbcType="BIT" property="deleted" />
    <result column="total_score" jdbcType="INTEGER" property="totalScore" />
    <result column="recognize_recognized" jdbcType="INTEGER" property="recognizeRecognized" />
    <result column="rebuild_level" jdbcType="INTEGER" property="rebuildLevel" />
    <result column="silver_coin" jdbcType="INTEGER" property="silverCoin" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, quality, `value`, `type`, `name`, add_time, update_time, deleted, total_score, 
    recognize_recognized, rebuild_level, silver_coin
  </sql>
  <select id="selectByExample" parameterType="org.linlinjava.litemall.db.domain.example.StoreInfoExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from store_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <if test="example.distinct">
      distinct
    </if>
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        id, quality, `value`, `type`, `name`, add_time, update_time, deleted, total_score, 
          recognize_recognized, rebuild_level, silver_coin
      </otherwise>
    </choose>
    from store_info
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from store_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPrimaryKeyWithLogicalDelete" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select 
    <include refid="Base_Column_List" />
    from store_info
    where id = #{id,jdbcType=INTEGER}
      and deleted = 
    <choose>
      <when test="andLogicalDeleted">
        1
      </when>
      <otherwise>
        0
      </otherwise>
    </choose>
  </select>
  <select id="selectByPrimaryKeySelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        id, quality, `value`, `type`, `name`, add_time, update_time, deleted, total_score, 
          recognize_recognized, rebuild_level, silver_coin
      </otherwise>
    </choose>
    from store_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from store_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.linlinjava.litemall.db.domain.example.StoreInfoExample">
    delete from store_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.linlinjava.litemall.db.domain.StoreInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into store_info (quality, `value`, `type`, 
      `name`, add_time, update_time, 
      deleted, total_score, recognize_recognized, 
      rebuild_level, silver_coin)
    values (#{quality,jdbcType=VARCHAR}, #{value,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, 
      #{name,jdbcType=VARCHAR}, #{addTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{deleted,jdbcType=BIT}, #{totalScore,jdbcType=INTEGER}, #{recognizeRecognized,jdbcType=INTEGER}, 
      #{rebuildLevel,jdbcType=INTEGER}, #{silverCoin,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.linlinjava.litemall.db.domain.StoreInfo">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into store_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="quality != null">
        quality,
      </if>
      <if test="value != null">
        `value`,
      </if>
      <if test="type != null">
        `type`,
      </if>
      <if test="name != null">
        `name`,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
      <if test="totalScore != null">
        total_score,
      </if>
      <if test="recognizeRecognized != null">
        recognize_recognized,
      </if>
      <if test="rebuildLevel != null">
        rebuild_level,
      </if>
      <if test="silverCoin != null">
        silver_coin,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="quality != null">
        #{quality,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        #{value,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=BIT},
      </if>
      <if test="totalScore != null">
        #{totalScore,jdbcType=INTEGER},
      </if>
      <if test="recognizeRecognized != null">
        #{recognizeRecognized,jdbcType=INTEGER},
      </if>
      <if test="rebuildLevel != null">
        #{rebuildLevel,jdbcType=INTEGER},
      </if>
      <if test="silverCoin != null">
        #{silverCoin,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.linlinjava.litemall.db.domain.example.StoreInfoExample" resultType="java.lang.Long">
    select count(*) from store_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update store_info
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.quality != null">
        quality = #{record.quality,jdbcType=VARCHAR},
      </if>
      <if test="record.value != null">
        `value` = #{record.value,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        `type` = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        `name` = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.addTime != null">
        add_time = #{record.addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=BIT},
      </if>
      <if test="record.totalScore != null">
        total_score = #{record.totalScore,jdbcType=INTEGER},
      </if>
      <if test="record.recognizeRecognized != null">
        recognize_recognized = #{record.recognizeRecognized,jdbcType=INTEGER},
      </if>
      <if test="record.rebuildLevel != null">
        rebuild_level = #{record.rebuildLevel,jdbcType=INTEGER},
      </if>
      <if test="record.silverCoin != null">
        silver_coin = #{record.silverCoin,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update store_info
    set id = #{record.id,jdbcType=INTEGER},
      quality = #{record.quality,jdbcType=VARCHAR},
      `value` = #{record.value,jdbcType=INTEGER},
      `type` = #{record.type,jdbcType=INTEGER},
      `name` = #{record.name,jdbcType=VARCHAR},
      add_time = #{record.addTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      deleted = #{record.deleted,jdbcType=BIT},
      total_score = #{record.totalScore,jdbcType=INTEGER},
      recognize_recognized = #{record.recognizeRecognized,jdbcType=INTEGER},
      rebuild_level = #{record.rebuildLevel,jdbcType=INTEGER},
      silver_coin = #{record.silverCoin,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.linlinjava.litemall.db.domain.StoreInfo">
    update store_info
    <set>
      <if test="quality != null">
        quality = #{quality,jdbcType=VARCHAR},
      </if>
      <if test="value != null">
        `value` = #{value,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        `type` = #{type,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        `name` = #{name,jdbcType=VARCHAR},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="totalScore != null">
        total_score = #{totalScore,jdbcType=INTEGER},
      </if>
      <if test="recognizeRecognized != null">
        recognize_recognized = #{recognizeRecognized,jdbcType=INTEGER},
      </if>
      <if test="rebuildLevel != null">
        rebuild_level = #{rebuildLevel,jdbcType=INTEGER},
      </if>
      <if test="silverCoin != null">
        silver_coin = #{silverCoin,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.linlinjava.litemall.db.domain.StoreInfo">
    update store_info
    set quality = #{quality,jdbcType=VARCHAR},
      `value` = #{value,jdbcType=INTEGER},
      `type` = #{type,jdbcType=INTEGER},
      `name` = #{name,jdbcType=VARCHAR},
      add_time = #{addTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      total_score = #{totalScore,jdbcType=INTEGER},
      recognize_recognized = #{recognizeRecognized,jdbcType=INTEGER},
      rebuild_level = #{rebuildLevel,jdbcType=INTEGER},
      silver_coin = #{silverCoin,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectOneByExample" parameterType="org.linlinjava.litemall.db.domain.example.StoreInfoExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <include refid="Base_Column_List" />
    from store_info
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    limit 1
  </select>
  <select id="selectOneByExampleSelective" parameterType="map" resultMap="BaseResultMap">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    select
    <choose>
      <when test="selective != null and selective.length > 0">
        <foreach collection="selective" item="column" separator=",">
          ${column.escapedColumnName}
        </foreach>
      </when>
      <otherwise>
        id, quality, `value`, `type`, `name`, add_time, update_time, deleted, total_score, 
          recognize_recognized, rebuild_level, silver_coin
      </otherwise>
    </choose>
    from store_info
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null">
      order by ${example.orderByClause}
    </if>
    limit 1
  </select>
  <update id="logicalDeleteByExample" parameterType="map">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    update store_info set deleted = 1
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="logicalDeleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--
      WARNING - @mbg.generated
      This element is automatically generated by MyBatis Generator, do not modify.
      @project https://github.com/itfsw/mybatis-generator-plugin
    -->
    update store_info set deleted = 1
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>